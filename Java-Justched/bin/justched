#!/usr/bin/env perl
package main;

use warnings;
use strict;
use Getopt::Std;
use Devel::CheckOS 1.76 qw(:fatal);
use WWW::Mechanize 1.73;
use WWW::Mechanize::TreeBuilder 1.10003;
use Java::Justched qw(:all);
use feature 'say';

die_if_os_isnt('Linux');
my %opts;
getopts( 'vfhc:j:', \%opts );

# as defined by Dist::Zilla::Plugin::PkgVersion
help($main::VERSION) if ( exists( $opts{h} ) and defined( $opts{h} ) );

my $cfg;
if ( ( exists( $opts{c} ) ) and ( -f $opts{c} ) ) {
    $cfg = Config::IniFiles->new( -file => $opts{c} );
}
else {
    $cfg = Config::IniFiles->new(
        -file => File::Spec->catfile( 'etc', 'default', 'justched' ) );
}

my $down_dir = $cfg->val( 'basic', 'download' );
send_notification( 'justched error!',
    "download dir $down_dir is not available" )
  unless ( -d $down_dir );
chdir($down_dir)
  or send_notification( 'justched error', "cannot change to $down_dir: $!" );

my $mech = WWW::Mechanize->new();
WWW::Mechanize::TreeBuilder->meta->apply($mech);
my $remote_jvm = get_remote_jvm( $mech, $cfg->val( 'basic', 'url' ) );
die "Couldn't get remote information,  aborted" unless ( defined($remote_jvm) );

my ( $local_jvm, $jvm_platform );
if ( defined( $local_jvm = get_local_jvm( $opts{j} || undef ) ) ) {
    if ( $local_jvm->{jvm_vendor} ne 'Oracle Corporation' ) {
        warn "Current system wide JVM is not from Oracle ("
          . $local_jvm->{jvm_vendor}
          . "), please make sure you want to replace it";
    }
    if ( $local_jvm->{version} < $remote_jvm->{version} ) {
        warn
'Latest release version is higher than local, check if upgrade is desired ( local is '
          . $local_jvm->{version}
          . ' and latest release is '
          . $remote_jvm->{version} . ')';
    }
    else {
        say 'local and last release JVM have the same verson' if ( $opts{v} );
    }

    if ( $local_jvm->{update} < $remote_jvm->{update} ) {

        say 'An JVM update is available' if ( $opts{v} );
    }
    else {

        unless ( $opts{f} ) {
            say
'local JVM update is the same or higher than last release, nothing to do';
            exit 0;
        }
    }

    $jvm_platform = check_arch($local_jvm);

}
else {

    $jvm_platform = check_arch(undef);

}

my $link = $mech->find_link( class => 'jvdla0' );

if (    ( defined($link) )
    and ( ref($link) ne '' )
    and ( $link->isa('WWW::Mechanize::Link') ) )
{

    $mech->get( $link->url_abs() );
    my $download_text;
    if ( $jvm_platform == 64 ) {
        $download_text = 'Linux x64';
    }
    else {
        $download_text = 'Linux';
    }
    my $download = $mech->find_link( text => $download_text );
    die "Could not find download link, check website"
      unless ( defined($download) );
    say( 'Download link is ' . $download->url_abs ) if $opts{v};
    my $response = $mech->head( $download->url_abs );
    say( "tarball to be downloaded is " . $response->filename ) if $opts{v};

    # add this information to the be used for script generation latter
    $remote_jvm->{filename} = $response->filename;
    $mech->get( $download, ':content_file' => $response->filename );

}

say "download completed, generating DEB package" if ( $opts{v} );
my $result = gen_pkg( $remote_jvm->{filename}, $cfg );
if ($result) {
    exit 0;
}
else {
    exit 1;
}

# subs

sub help {

    my $version = shift;

    print <<EOF;
justched - version $version
A Perl script to update Java Runtime Environment for Ubuntu

This program will download the tarball of JRE and generate a DEB package for it automatically.
The objective is to have this program scheduled (or executed at each logon) so the end user can receive a notification
of a new JRE available for update.

Parameters available:
-v: verbose mode, usefull for debugging (optional)
-f: forces the download and DEB package generation (optional)
-c <CONFIG FILE>: optional complete pathname to an alternated configuration file (default is /etc/default/justched)
-h: this help message (optional)
-j <CLASS PATH>: complete pathname to be used as '-classpath' parameter of the JVM (optional)

EOF
    exit 0;

}
